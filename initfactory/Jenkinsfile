/* kubectl command */
def kubectl = "kubectl --context=initfactory"

/* Container image to use */
def initfactory_image = "534354616613.dkr.ecr.us-east-1.amazonaws.com/spacemesh-testnet-initfactory:latest"

/* Job resources and other params */
def backoff_limit = 5
def cpu_requests  = "500m"
def cpu_limits    = "1000m"


/* Library function: call script and return stdout */
def shell = {cmd -> sh(returnStdout: true, script: cmd).trim() }

/* Shell script snippets */
def aws_asg_size = {aws_region, group_name ->
  """aws --region=${aws_region} autoscaling describe-auto-scaling-groups --auto-scaling-group-name ${group_name} --query 'AutoScalingGroups[0] | [length(Instances), MaxSize]' --output text"""
}

def aws_asg_set_size = {aws_region, group_name, desired_nodes, max_nodes ->
  """aws --region=${aws_region} autoscaling update-auto-scaling-group --auto-scaling-group-name ${group_name} --desired-capacity ${desired_nodes} --max-size ${max_nodes}"""
}

/* Pipeline global vars */
def job_id

/*
  PIPELINE
 */
pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '5')) // Keep last 5 builds only
  }

  /* Job parameters */
  parameters {
    string(name: 'INIT_COUNT',         defaultValue: '10',      description: 'Init tasks(jobs) count')
    string(name: 'SPACEMESH_FILESIZE', defaultValue: '1048576', description: 'Init file size')
    string(name: 'SPACEMESH_SPACE',    defaultValue: '1048576', description: 'Init file space size')
    string(name: 'SPACEMESH_VOL_SIZE', defaultValue: '10',      description: 'Init job volume space')
    string(name: 'SPACEMESH_ID',       defaultValue: '',        description: 'Miner ID')
  }

  agent any

  stages {
    stage("Prepare") {
      steps {
        script {
          // Ensure the parameters are numeric
          INIT_COUNT = INIT_COUNT as int
          SPACEMESH_SPACE = SPACEMESH_SPACE as int
          SPACEMESH_FILESIZE = SPACEMESH_FILESIZE as int
          SPACEMESH_VOL_SIZE = SPACEMESH_VOL_SIZE as int

          assert SPACEMESH_VOL_SIZE > 5
          assert SPACEMESH_SPACE % SPACEMESH_FILESIZE == 0

          // If miner ID is given - then run a single job
          if(SPACEMESH_ID != "") {
              INIT_COUNT = 1
          }

          // Generate a random job id
          job_id = String.format("%08x", (new Random()).nextInt())
        }
      }
    }

    stage('Create k8s manifest') {
      steps {
        script {
          (1..INIT_COUNT).collect().each({i ->
            k8s_manifest = """\
              ---
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                name: initfactory-${job_id}-pvc-${i}
                labels:
                  app: initfactory
                  init-job: \"${job_id}\"
                  worker-id: initfactory-${job_id}-job-${i}
              spec:
                storageClassName: gp2-delayed
                accessModes: [ ReadWriteOnce ]
                resources:
                  requests:
                    storage: ${SPACEMESH_VOL_SIZE}Gi
              ---
              apiVersion: batch/v1
              kind: Job
              metadata:
                name: initfactory-${job_id}-job-${i}
                labels:
                  app: initfactory
                  init-job: \"${job_id}\"
                  worker-id: initfactory-${job_id}-job-${i}
              spec:
                template:
                  metadata:
                    labels:
                      app: initfactory
                  spec:
                    tolerations:
                      - effect: NoExecute
                        key: dedicated
                        operator: Equal
                        value: InitFactory
                    nodeSelector:
                      pool: InitFactory
                    volumes:
                      - name: data-storage
                        persistentVolumeClaim:
                          claimName: initfactory-${job_id}-pvc-${i}
                    initContainers:
                      - name: init
                        image: alpine:3.10.1
                        volumeMounts:
                          - mountPath: /home
                            name: data-storage
                        command: [ /bin/sh, -c, "adduser -D spacemesh" ]
                    containers:
                      - name: default
                        image: "${initfactory_image}"
                        env:
                          - name: SPACEMESH_S3_BUCKET
                            valueFrom:
                              configMapKeyRef:
                                name: initfactory
                                key: initdata_s3_bucket
                          - name: SPACEMESH_S3_PREFIX
                            valueFrom:
                              configMapKeyRef:
                                name: initfactory
                                key: initdata_s3_prefix
                          - name: SPACEMESH_DYNAMODB_TABLE
                            valueFrom:
                              configMapKeyRef:
                                name: initfactory
                                key: initdata_dynamodb_table
                          - name: SPACEMESH_DYNAMODB_REGION
                            valueFrom:
                              configMapKeyRef:
                                name: initfactory
                                key: initdata_dynamodb_region
                          - name: SPACEMESH_FILESIZE
                            value: "${SPACEMESH_FILESIZE}"
                          - name: SPACEMESH_SPACE
                            value: "${SPACEMESH_SPACE}"
                          - name: SPACEMESH_ID
                            value: "${SPACEMESH_ID}"
                        volumeMounts:
                          - mountPath: /home
                            name: data-storage
                        resources:
                          requests:
                            cpu: "${cpu_requests}"
                          limits:
                            cpu: "${cpu_limits}"
                    restartPolicy: Never
                backoffLimit: ${backoff_limit}
              """.stripIndent()
            echo k8s_manifest
            writeFile file: "initfactory-${job_id}-job-${i}.yml", text: k8s_manifest
          })
        }
      }
    }

    stage('Apply manifest') {
      steps {
        script {
          (1..INIT_COUNT).collect().each({i ->
            sh """${kubectl} apply -f initfactory-${job_id}-job-${i}.yml"""
          })
        }
      }
    }

    stage('Archive manifest') {
      steps {
        archiveArtifacts "initfactory-${job_id}-*.yml"
      }
    }
  }

  post {
    success {
      // Do some cleanup
      sh "rm -f manifest-*.yml"
    }
  }
}

/* vim:set filetype=groovy ts=2 sw=2 et: */
